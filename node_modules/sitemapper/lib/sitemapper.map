{"version":3,"sources":["assets/sitemapper.js"],"sourcesContent":["/* global require,module */\n\n/**\n * Sitemap Parser\n *\n * Copyright (c) 2014 Sean Thomas Burke\n * Licensed under the MIT license.\n * @author Sean Burke <hawaiianchimp@gmail.com>\n */\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _xml2jsEs6Promise = require('xml2js-es6-promise');\n\nvar _xml2jsEs6Promise2 = _interopRequireDefault(_xml2jsEs6Promise);\n\nvar _requestPromise = require('request-promise');\n\nvar _requestPromise2 = _interopRequireDefault(_requestPromise);\n\nvar _es6Promise = require('es6-promise');\n\n/**\n * @typedef {Object} Sitemapper\n */\n\nvar Sitemapper = (function () {\n  /**\n   * Construct the Sitemapper class\n   *\n   * @params {Object} options to set\n   * @params {string} [options.url] - the Sitemap url (e.g http://wp.seantburke.com/sitemap.xml)\n   * @params {Timeout} [options.timeout] - @see {timeout}\n   *\n   * @example let sitemap = new Sitemapper({\n   *                                 url: 'http://wp.seantburke.com/sitemap.xml',\n   *                                 timeout: 15000\n   *                               });\n   */\n\n  function Sitemapper(options) {\n    _classCallCheck(this, Sitemapper);\n\n    var settings = options || {};\n    this.url = settings.url;\n    this.timeout = settings.timeout || 15000;\n    this.timeoutTable = {};\n  }\n\n  /**\n   * Callback for the getSites method\n   *\n   * @callback getSitesCallback\n   * @param {Object} error - error from callback\n   * @param {Array} sites - an Array of sitemaps\n   */\n\n  /**\n   * Timeout in milliseconds\n   *\n   * @typedef {Number} Timeout\n   * the number of milliseconds before all requests timeout. The promises will still resolve so\n   * you'll still receive parts of the request, but maybe not all urls\n   * default is 15000 which is 15 seconds\n   */\n\n  /**\n   * Resolve handler type for the promise in this.parse()\n   *\n   * @typedef {Object} ParseData\n   *\n   * @property {Error} error that either comes from `xmlParse` or `request` or custom error\n   * @property {Object} data\n   * @property {string} data.url - URL of sitemap\n   * @property {Array} data.urlset - Array of returned URLs\n   * @property {string} data.urlset.url - single Url\n   * @property {Object} data.sitemapindex - index of sitemap\n   * @property {string} data.sitemapindex.sitemap - Sitemap\n   * @example {\n   *        error: \"There was an error!\"\n   *        data: {\n   *          url: 'linkedin.com',\n   *          urlset: [{\n   *            url: 'www.linkedin.com/project1'\n   *          },[{\n   *            url: 'www.linkedin.com/project2'\n   *          }]\n   *        }\n   * }\n   */\n\n  /**\n   * Resolve handler type for the promise in this.parse()\n   *\n   * @typedef {Object} SitesData\n   *\n   * @property {string} url - the original url used to query the data\n   * @property {SitesArray} sites\n   * @example {\n   *          url: 'linkedin.com/sitemap.xml',\n   *          sites: [\n   *            'linkedin.com/project1',\n   *            'linkedin.com/project2'\n   *            ]\n   *\n   **/\n\n  /**\n   * An array of urls\n   *\n   * @typedef {String[]} SitesArray\n   * @example [\n   *            'www.google.com',\n   *            'www.linkedin.com'\n   *          ]\n   *\n   **/\n\n  /**\n   * Gets the sites from a sitemap.xml with a given URL\n   *\n   * @public\n   * @param {string} [url] - the Sitemaps url (e.g http://wp.seantburke.com/sitemap.xml)\n   * @returns {Promise<SitesData>}\n   * @example sitemapper.fetch('example.xml')\n   *                    .then((sites) => console.log(sites));\n   */\n\n  _createClass(Sitemapper, [{\n    key: 'fetch',\n    value: function fetch() {\n      var _this = this;\n\n      var url = arguments.length <= 0 || arguments[0] === undefined ? this.url : arguments[0];\n\n      this.url = this.url || url;\n      return new _es6Promise.Promise(function (resolve) {\n        return _this.crawl(url).then(function (sites) {\n          return resolve({ url: url, sites: sites });\n        });\n      });\n    }\n\n    /**\n     * Get the timeout\n     *\n     * @example console.log(sitemapper.timeout);\n     * @returns {Timeout}\n     */\n  }, {\n    key: 'parse',\n\n    /**\n     * Requests the URL and uses xmlParse to parse through and find the data\n     *\n     * @private\n     * @param {string} [url] - the Sitemaps url (e.g http://wp.seantburke.com/sitemap.xml)\n     * @returns {Promise<ParseData>}\n     */\n    value: function parse() {\n      var _this2 = this;\n\n      var url = arguments.length <= 0 || arguments[0] === undefined ? this.url : arguments[0];\n\n      var requestOptions = {\n        method: 'GET',\n        uri: url,\n        resolveWithFullResponse: true,\n        gzip: true\n      };\n\n      return new _es6Promise.Promise(function (resolve) {\n        var requester = (0, _requestPromise2['default'])(requestOptions).then(function (response) {\n          if (!response || response.statusCode !== 200) {\n            clearTimeout(_this2.timeoutTable[url]);\n            return resolve({ error: response.error, data: response });\n          }\n          return (0, _xml2jsEs6Promise2['default'])(response.body);\n        }).then(function (data) {\n          return resolve({ error: null, data: data });\n        })['catch'](function (response) {\n          return resolve({ error: response.error, data: {} });\n        });\n\n        _this2.initializeTimeout(url, requester, resolve);\n      });\n    }\n\n    /**\n     * Timeouts are necessary for large xml trees. This will cancel the call if the request is taking\n     * too long, but will still allow the promises to resolve.\n     *\n     * @private\n     * @param {string} url - url to use as a hash in the timeoutTable\n     * @param {Promise} requester - the promise that creates the web request to the url\n     * @param {Function} callback - the resolve method is used here to resolve the parent promise\n     */\n  }, {\n    key: 'initializeTimeout',\n    value: function initializeTimeout(url, requester, callback) {\n      var _this3 = this;\n\n      // this resolves instead of rejects in order to allow other requests to continue\n      this.timeoutTable[url] = setTimeout(function () {\n        requester.cancel();\n\n        callback({\n          error: 'request timed out after ' + _this3.timeout + ' milliseconds',\n          data: {}\n        });\n      }, this.timeout);\n    }\n\n    /**\n     * Recursive function that will go through a sitemaps tree and get all the sites\n     *\n     * @private\n     * @recursive\n     * @param {string} url - the Sitemaps url (e.g http://wp.seantburke.com/sitemap.xml)\n     * @returns {Promise<SitesArray> | Promise<ParseData>}\n     */\n  }, {\n    key: 'crawl',\n    value: function crawl(url) {\n      var _this4 = this;\n\n      return new _es6Promise.Promise(function (resolve) {\n        _this4.parse(url).then(function (_ref) {\n          var error = _ref.error;\n          var data = _ref.data;\n\n          // The promise resolved, remove the timeout\n          clearTimeout(_this4.timeoutTable[url]);\n\n          if (error) {\n            // Fail silently\n            return resolve([]);\n          } else if (data && data.urlset && data.urlset.url) {\n            var sites = data.urlset.url.map(function (site) {\n              return site.loc && site.loc[0];\n            });\n\n            return resolve([].concat(sites));\n          } else if (data && data.sitemapindex) {\n            // Map each child url into a promise to create an array of promises\n            var sitemap = data.sitemapindex.sitemap.map(function (map) {\n              return map.loc && map.loc[0];\n            });\n            var promiseArray = sitemap.map(function (site) {\n              return _this4.crawl(site);\n            });\n\n            // Make sure all the promises resolve then filter and reduce the array\n            return _es6Promise.Promise.all(promiseArray).then(function (results) {\n              var sites = results.filter(function (result) {\n                return !result.error;\n              }).reduce(function (prev, curr) {\n                return prev.concat(curr);\n              }, []);\n\n              return resolve(sites);\n            });\n          }\n          // Fail silently\n          return resolve([]);\n        });\n      });\n    }\n\n    /**\n     * /**\n     * Gets the sites from a sitemap.xml with a given URL\n     * @deprecated\n     * @param {string} url - url to query\n     * @param {getSitesCallback} callback - callback for sites and error\n     * @callback\n     */\n  }, {\n    key: 'getSites',\n    value: function getSites(url, callback) {\n      if (url === undefined) url = this.url;\n\n      var err = {};\n      var sites = [];\n      this.fetch(url).then(function (response) {\n        sites = response.sites;\n      })['catch'](function (error) {\n        err = error;\n      });\n      return callback(err, sites);\n    }\n  }], [{\n    key: 'timeout',\n    get: function get() {\n      return this.timeout;\n    },\n\n    /**\n     * Set the timeout\n     *\n     * @public\n     * @param {Timeout} duration\n     * @example sitemapper.timeout = 15000; // 15 seconds\n     */\n    set: function set(duration) {\n      this.timeout = duration;\n    }\n\n    /**\n     *\n     * @param {string} url - url for making requests. Should be a link to a sitemaps.xml\n     * @example sitemapper.url = 'http://wp.seantburke.com/sitemap.xml'\n     */\n  }, {\n    key: 'url',\n    set: function set(url) {\n      this.url = url;\n    },\n\n    /**\n     * Get the url to parse\n     * @returns {string}\n     * @example console.log(sitemapper.url)\n     */\n    get: function get() {\n      return this.url;\n    }\n  }]);\n\n  return Sitemapper;\n})();\n\nexports['default'] = Sitemapper;\nmodule.exports = exports['default'];"],"names":[],"mappingsfile":"sitemapper.js"}